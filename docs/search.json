[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html",
    "href": "EDA_IMF_Airbnb.html",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "",
    "text": "1. International Monetary Fund\nUses the excel file called WEOApr2020all.xlsx. This file was obtained from the International Monetary Fund and it contains data from the World Economic Outlook that pertains to national accounts, inflation, unemployment rates, balance of payments, fiscal indicators, trade for countries and country groups (aggregates), and commodity prices whose data are reported by the IMF.\nNote: The data is in a tabular format and delimited with a tab as a separator.\n\n2. AirBnB Open Data - New York City\nUses the CSV file called AB_NYC_2019.csv. This file was obtained from Kaggle.com and it contains data that pertains to hosts, geographical availability, etc.\nNote: The data is in a tabular format and delimited with a comma as a separator.\n\nYou are encouraged to open the file in a spreadsheet program to examine the data. Your task is to use Python and the following list of libraries to code the processes defined by the questions. Leave in the relevant codes used for testing but comment them out before submission. You are also encouraged to use as many code cells as necessary to complete the tasks.\nNote: Take care not to overwrite your loaded dataset.\nPermissible Libraries\n\nPandas\nMatplotlib\n\nDeliverables:\n\nFollow the instructions as detailed in this file.\nDo not modify any cell within this file unless otherwise stated.\nOnce you have completed this assignment, navigate to Kernel in the menu and click on Restart Kernel and Run All Cells.... You are to ensure that each cell has been completed and that they run without errors.\nBefore submitting, click on Restart Kernel and Clear All Outputs.... Then, zip all files in the format CET2011_P02_&lt;trainee_name&gt;.zip.\nFailure to do so will be awarded NYC."
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#general-part",
    "href": "EDA_IMF_Airbnb.html#general-part",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "3.1 General Part",
    "text": "3.1 General Part\nLoad the required libraries.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#library-settings",
    "href": "EDA_IMF_Airbnb.html#library-settings",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "3.2 Library settings",
    "text": "3.2 Library settings\n\n\nCode\npd.set_option(\"display.max_columns\", None)"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#international-monetary-fund",
    "href": "EDA_IMF_Airbnb.html#international-monetary-fund",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "3.3 International Monetary Fund",
    "text": "3.3 International Monetary Fund\nQ1) Load the data into memory using Pandas; perform a preliminary first clean of the data and return this data.\n\nPerform standard checks such as missing data (NaN or None), datatypes, etc.\nEnsure that all the column names are of the datatype string.\nAssess whether it is necessary to remove the last two rows of the DataFrame for your specific analysis.\n\n\n\nCode\nimf_csv_path = \"datasets/WEOApr2020all.xlsx\"\nassert os.path.exists(imf_csv_path)\ndf = pd.read_excel(imf_csv_path)\ndf.head(2)\n\n\n\n\n\n\n\n\n\n\nWEO Country Code\nISO\nWEO Subject Code\nCountry\nSubject Descriptor\nSubject Notes\nUnits\nScale\nCountry/Series-specific Notes\n1980\n1981\n1982\n1983\n1984\n1985\n1986\n1987\n1988\n1989\n1990\n1991\n1992\n1993\n1994\n1995\n1996\n1997\n1998\n1999\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\nEstimates Start After\n\n\n\n\n0\n512\nAFG\nNGDP_RPCH\nAfghanistan\nGross domestic product, constant prices\nAnnual percentages of constant price GDP are y...\nPercent change\nNaN\nSource: National Statistics Office Latest actu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n8.692\n0.671\n11.830\n5.361\n13.340\n3.863\n20.585\n8.438\n6.479\n13.968\n5.683\n2.697\n0.988\n2.164\n2.889\n2.664\n3.037\n-3.007\n4.495\n2018.0\n\n\n1\n512\nAFG\nPPPGDP\nAfghanistan\nGross domestic product, current prices\nThese data form the basis for the country weig...\nPurchasing power parity; international dollars\nBillions\nSource: National Statistics Office Latest actu...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n18.835\n20.852\n21.557\n24.858\n26.983\n31.404\n33.252\n40.403\n44.323\n48.180\n55.963\n60.181\n62.948\n64.231\n66.301\n69.501\n73.091\n76.624\n74.792\n79.678\n2018.0\n\n\n\n\n\n\n\n\n\n\nCode\n## Drop columns that are not used in visualization such as notes and codes.\n\n\n\n\nCode\nredundant_col = \"WEO Country Code   ISO WEO Subject Code    Subject Notes   Units   Scale   Country/Series-specific Notes   Estimates Start After\".split(\n    \"\\t\"\n)\nredundant_col\n\n\n['WEO Country Code',\n 'ISO',\n 'WEO Subject Code',\n 'Subject Notes',\n 'Units',\n 'Scale',\n 'Country/Series-specific Notes',\n 'Estimates Start After']\n\n\n\n\nCode\nfor c in redundant_col:\n    if c in df.columns:\n        print(df[c].value_counts())\n        print(\"*\" * 100)\n\n\nWEO Country Code\n512                                                                         8\n716                                                                         8\n278                                                                         8\n692                                                                         8\n694                                                                         8\n                                                                           ..\n258                                                                         8\n656                                                                         8\n654                                                                         8\n336                                                                         8\nInternational Monetary Fund, World Economic Outlook Database, April 2020    1\nName: count, Length: 195, dtype: int64\n****************************************************************************************************\nISO\nAFG    8\nSMR    8\nNZL    8\nNIC    8\nNER    8\n      ..\nGTM    8\nGIN    8\nGNB    8\nGUY    8\nZWE    8\nName: count, Length: 194, dtype: int64\n****************************************************************************************************\nWEO Subject Code\nNGDP_RPCH        194\nPPPGDP           194\nNGDPRPPPPCPCH    194\nPCPIPCH          194\nPCPIEPCH         194\nLUR              194\nGGXCNL_NGDP      194\nBCA_NGDPD        194\nName: count, dtype: int64\n****************************************************************************************************\nSubject Notes\nAnnual percentages of constant price GDP are year-on-year changes; the base year is country-specific . Expenditure-based GDP is total final expenditures at purchasers? prices (including the f.o.b. value of exports of goods and services), less the f.o.b. value of imports of goods and servicesnThese data form the basis for the country weights used to generate the World Economic Outlook country group composites for the domestic economy.   The IMF is not a primary source for purchasing power parity (PPP) data. WEO weights have been created from primary sources and are used solely for purposes of generating country group composites. For primary source information, please refer to one of the following sources: the Organization for Economic Cooperation and Development, the World Bank, or the Penn World Tables.   For further information see Box A2 in the April 2004 World Economic Outlook, Box 1.2 in the September 2003 World Economic Outlook for a discussion on the measurement of global growth and Box A.1 in the May 2000 World Economic Outlook for a summary of the revised PPP-based weights, and Annex IV of the May 1993 World Economic Outlook. See also Anne Marie Gulde and Marianne Schulze-Ghattas, Purchasing Power Parity Based Weights for the World Economic Outlook, in Staff Studies for the World Economic Outlook (Washington: IMF, December 1993), pp. 106-23.    194\nGDP is expressed in constant international dollars per person. Data are derived by dividing constant price purchasing-power parity (PPP) GDP by total populationnAnnual percentages of average consumer prices are year-on-year changes.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   194\n Annual percentages of end of period consumer prices are year-on-year changesnUnemployment rate can be defined by either the national definition, the ILO harmonized definition, or the OECD harmonized definition. The OECD harmonized unemployment rate gives the number of unemployed persons as a percentage of the labor force (the total number of people employed plus unemployed). [OECD Main Economic Indicators, OECD, monthly] As defined by the International Labour Organization, unemployed workers are those who are currently not working but are willing and able to work for pay, currently available to work, and have actively searched for work. [ILO, http://www.ilo.org/public/english/bureau/stat/res/index.htm]                                                                                                                                                                                                                                                                                                                                                                                                                                                                194\nNet lending (+)/ borrowing (?) is calculated as revenue minus total expenditure. This is a core GFS balance that measures the extent to which general government is either putting financial resources at the disposal of other sectors in the economy and nonresidents (net lending), or utilizing the financial resources generated by other sectors and nonresidents (net borrowing). This balance may be viewed as an indicator of the financial impact of general government activity on the rest of the economy and nonresidents (GFSM 2001, paragraph 4.17). Note: Net lending (+)/borrowing (?) is also equal to net acquisition of financial assets minus net incurrence of liabilities.                                                                                                                                                                                                                                                                                                                                                                                                                         194\nCurrent account is all transactions other than those in financial and capital items. The major classifications are goods and services, income and current transfers. The focus of the BOP is on transactions (between an economy and the rest of the world) in goods, services, and incomenName: count, dtype: int64\n****************************************************************************************************\nUnits\nPercent change                                    582\nPercent of GDP                                    388\nPurchasing power parity; international dollars    194\nPurchasing power parity; percent change           194\nPercent of total labor force                      194\nName: count, dtype: int64\n****************************************************************************************************\nScale\nBillions    194\nName: count, dtype: int64\n****************************************************************************************************\nCountry/Series-specific Notes\nSource: Central Bank Latest actual data: 2019 BOP Manual used: Balance of Payments and International Investment Position Manual, sixth edition (BPM6)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        25\nSource: Central Bank Latest actual data: 2018 BOP Manual used: Balance of Payments and International Investment Position Manual, sixth editionnSource: National Statistics Office Latest actual data: 2019 Harmonized prices: Yes Frequency of source data: Monthly Base yearnSource: Central Bank Latest actual data: 2018 BOP Manual used: Balance of Payments Manual, fifth editionnSource: National Statistics Office Latest actual data: 2019 Harmonized prices: No Frequency of source data: Monthly Base yearnnSource: Ministry of Finance or Treasury. Eurostat Latest actual data: 2018 Fiscal assumptions: Fiscal projections are based on the country's Budget 2020. Start/end months of reporting year: January/December GFS Manual used: Government Finance Statistics Manual (GFSM) 2001 Basis of recording: Accrual General government includes: Central Government; Local Government; Social Security Funds; Other; Valuation of public debt: Nominal value Instruments included in gross and net debt: Currency and Deposits; Securities Other than Shares; Loans;. Gross debt follows the Maastricht definition of gross debt, and excludes other accounts payable. Net debt is defined as gross debt less currency and deposits, debt securities, and loans.     1\nSource: National Statistics Office. Central Statistical Office of Ireland (CSO), data is from the Labor Force Survey (LFS) and is the average of the quarterly observations. Latest actual data: 2019 Employment type: Harmonized ILO definition Primary domestic currency: Euro Data last updated: 04/2020                                                                                                                                                                                                                                                                                                                                                                                                                                                   1\nSource: Central Bank Latest actual data: 2018. Estimates based on authorities' figures. BOP Manual used: Balance of Payments and International Investment Position Manual, sixth editionnSource: Ministry of Finance or Treasury Latest actual data: 2018 Start/end months of reporting year: January/December GFS Manual used: Government Finance Statistics Manual (GFSM) 2001 Basis of recording: Cash General government includes: Central Government; Valuation of public debt: Current market value Instruments included in gross and net debt: Securities Other than Shares; Loans; Other Accounts Receivable/Payable; Other                                                                                                                                                                                                                                                                                                                    1\nSource: Reserve Bank of Zimbabwe and Ministry of Finance. Latest actual data: 2018. Structural break in 2010 due to a shift in the data source from exchange control data to customs data for trade statistics BOP Manual used: Balance of Payments and International Investment Position Manual, sixth edition (BPM6)                                                                                                                                                                                                                                                                                                                                                                                                                                        1\nName: count, Length: 774, dtype: int64\n****************************************************************************************************\nEstimates Start After\n2019.0    691\n2018.0    656\n2017.0     72\n2015.0     19\n2016.0     11\n2011.0      7\n2010.0      4\n2009.0      2\n2013.0      1\n2014.0      1\n2020.0      1\n2012.0      1\nName: count, dtype: int64\n****************************************************************************************************\n\n\n\n\nCode\n# Todo:\n# country_info = {country: (ISO, Estimates_Start_After}\n\n\n\n\nCode\n# Drop redundant colaumns\nfor c in redundant_col:\n    if c in df.columns:\n        df.drop(columns=c, inplace=True)\n\ndf.head(2)\n\n\n\n\n\n\n\n\n\n\nCountry\nSubject Descriptor\n1980\n1981\n1982\n1983\n1984\n1985\n1986\n1987\n1988\n1989\n1990\n1991\n1992\n1993\n1994\n1995\n1996\n1997\n1998\n1999\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n0\nAfghanistan\nGross domestic product, constant prices\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n8.692\n0.671\n11.830\n5.361\n13.340\n3.863\n20.585\n8.438\n6.479\n13.968\n5.683\n2.697\n0.988\n2.164\n2.889\n2.664\n3.037\n-3.007\n4.495\n\n\n1\nAfghanistan\nGross domestic product, current prices\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n18.835\n20.852\n21.557\n24.858\n26.983\n31.404\n33.252\n40.403\n44.323\n48.180\n55.963\n60.181\n62.948\n64.231\n66.301\n69.501\n73.091\n76.624\n74.792\n79.678"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#assess-whether-it-is-necessary-to-remove-the-last-two-rows-of-the-dataframe-for-your-specific-analysis.",
    "href": "EDA_IMF_Airbnb.html#assess-whether-it-is-necessary-to-remove-the-last-two-rows-of-the-dataframe-for-your-specific-analysis.",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "3.4 * Assess whether it is necessary to remove the last two rows of the DataFrame for your specific analysis.",
    "text": "3.4 * Assess whether it is necessary to remove the last two rows of the DataFrame for your specific analysis.\n\n3.4.1 Check missing values per row to decide any rows to discard\nDiscard row 1552 and 1553 where all elements in the rows are missing values.\n\n\nCode\n(df.isna().sum(axis=1) / len(df.columns)).sort_values(ascending=False)[:5]\n\n\n1553    1.000000\n1552    1.000000\n877     0.954545\n701     0.954545\n709     0.954545\ndtype: float64\n\n\n\n\nCode\ndf.iloc[[1553, 1552]]\n\n\n\n\n\n\n\n\n\n\nCountry\nSubject Descriptor\n1980\n1981\n1982\n1983\n1984\n1985\n1986\n1987\n1988\n1989\n1990\n1991\n1992\n1993\n1994\n1995\n1996\n1997\n1998\n1999\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n1553\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1552\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\n\n\n\nCode\ndf.drop(index=[1552, 1553], inplace=True)\n(df.isna().sum(axis=0) / df.shape[0]).sort_values(ascending=False)[:5]\n\n\n1980    0.467139\n1981    0.428479\n1982    0.420747\n1983    0.414304\n1984    0.410438\ndtype: float64"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#perform-standard-checks-such-as-missing-data-nan-or-none-datatypes-etc.",
    "href": "EDA_IMF_Airbnb.html#perform-standard-checks-such-as-missing-data-nan-or-none-datatypes-etc.",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "3.5 * Perform standard checks such as missing data (NaN or None), datatypes, etc.",
    "text": "3.5 * Perform standard checks such as missing data (NaN or None), datatypes, etc.\n\n\nCode\n# Percentage of rows with any missing data\nmiss_row = df.isna().any(axis=1)\nlen(miss_row[miss_row].index) / len(miss_row)\ndf.iloc[miss_row[miss_row].index]\n\n\n\n\n\n\n\n\n\n\nCountry\nSubject Descriptor\n1980\n1981\n1982\n1983\n1984\n1985\n1986\n1987\n1988\n1989\n1990\n1991\n1992\n1993\n1994\n1995\n1996\n1997\n1998\n1999\n2000\n2001\n2002\n2003\n2004\n2005\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n2021\n\n\n\n\n0\nAfghanistan\nGross domestic product, constant prices\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n8.692\n0.671\n11.830\n5.361\n13.340\n3.863\n20.585\n8.438\n6.479\n13.968\n5.683\n2.697\n0.988\n2.164\n2.889\n2.664\n3.037\n-3.007\n4.495\n\n\n1\nAfghanistan\nGross domestic product, current prices\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n18.835\n20.852\n21.557\n24.858\n26.983\n31.404\n33.252\n40.403\n44.323\n48.180\n55.963\n60.181\n62.948\n64.231\n66.301\n69.501\n73.091\n76.624\n74.792\n79.678\n\n\n2\nAfghanistan\nGross domestic product per capita, constant pr...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n4.398\n-3.112\n8.042\n2.194\n9.143\n1.286\n17.527\n5.431\n3.234\n10.299\n2.236\n-0.521\n-1.941\n-0.547\n0.358\n1.268\n1.654\n-4.291\n3.063\n\n\n3\nAfghanistan\nInflation, average consumer prices\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n35.663\n16.358\n10.569\n6.785\n8.681\n26.419\n-6.811\n2.179\n11.804\n6.441\n7.386\n4.674\n-0.662\n4.384\n4.976\n0.626\n2.302\n4.711\n4.451\n\n\n4\nAfghanistan\nInflation, end of period consumer prices\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n6.530\n13.266\n10.562\n4.285\n16.092\n18.814\n-9.836\n10.246\n9.312\n5.875\n7.241\n1.487\n1.131\n4.588\n3.041\n0.755\n2.773\n4.5\n5.000\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n1547\nZimbabwe\nInflation, average consumer prices\nNaN\n5.556\n0.59\n-8.452\n-1.857\n-16.01\n10.666\n12.785\n-1.057\n-3.847\n1.345\n-13.143\n-2.998\n0.376\n-2.761\n15.227\n6.006\n-0.965\n-28.023\n-13.431\n4.475\n-37.198\n-34.445\n-8.565\n113.569\n-31.522\n32.974\n-72.729\n156.964\n6.216\n3.045\n3.470\n3.720\n1.632\n-0.213\n-2.410\n-1.558\n0.907\n10.607\n255.292\n319.036\n3.700\n\n\n1548\nZimbabwe\nInflation, end of period consumer prices\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n-7.670\n3.217\n4.920\n2.914\n0.331\n-0.796\n-2.473\n-0.898\n3.430\n42.074\n521.150\n154.297\n3.000\n\n\n1549\nZimbabwe\nUnemployment rate\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1550\nZimbabwe\nGeneral government net lending/borrowing\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n-5.265\n-2.150\n-2.523\n-1.804\n-2.176\n0.619\n-2.164\n0.807\n-0.621\n-0.421\n-1.418\n-6.242\n-8.113\n-4.499\n-2.575\n-4.931\n-1.518\n\n\n1551\nZimbabwe\nCurrent account balance\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n-2.534\n-5.788\n-10.804\n-4.109\n-3.995\n-4.466\n-1.779\n-7.717\n-1.312\n2.070\n2.838\n3.248\n2.323\n-0.720\n-1.353\n-0.958\n1.887\n3.829\n-2.061\n-9.734\n-11.989\n-17.245\n-10.727\n-13.230\n-11.563\n-7.617\n-3.580\n-1.299\n-5.896\n1.133\n-1.914\n-1.894\n\n\n\n\n740 rows × 44 columns\n\n\n\n\n\n\nCode\nmiss_row = df.isna().any(axis=1)\nmiss_col = df.isna().any(axis=0)\ndf_mising = df[[\"Country\", \"Subject Descriptor\"] + list(miss_col[miss_col].index)].iloc[\n    miss_row[miss_row].index\n]\ndf_mising.to_csv(\"missing.csv\")\n\n\n\n\nCode\n# List countries where the missing data belongs to\ndf_mising.Country.value_counts(normalize=True).sort_values(ascending=False)\n\n\nCountry\nAfghanistan      0.010811\nPalau            0.010811\nTimor-Leste      0.010811\nTajikistan       0.010811\nSouth Sudan      0.010811\n                   ...   \nPanama           0.001351\nBangladesh       0.001351\nAlgeria          0.001351\nUnited States    0.001351\nParaguay         0.001351\nName: proportion, Length: 182, dtype: float64"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#convert-column-names-to-string",
    "href": "EDA_IMF_Airbnb.html#convert-column-names-to-string",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "3.6 Convert column names to string",
    "text": "3.6 Convert column names to string\n\n\nCode\nbefore = set([type(c) for c in df.columns])\n# type {type_: [c for c in df.columns if type(c) == type_] for type_ in list(set(type(c)) for c in df.columns)}\ndf.columns = map(str, list(df.columns))\nafter = set([type(c) for c in df.columns])\nprint(f\"before {before}\\nafter {after}\")\n### \\* Ensure that all the column names are of the datatype `string`.\nfor c in df.columns:\n    assert type(c) == str\n\n\nbefore {&lt;class 'int'&gt;, &lt;class 'str'&gt;}\nafter {&lt;class 'str'&gt;}\n\n\n\n\nCode\nprint(df.shape)\ndf.info()\n\n\n(1552, 44)\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1552 entries, 0 to 1551\nData columns (total 44 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   Country             1552 non-null   object \n 1   Subject Descriptor  1552 non-null   object \n 2   1980                827 non-null    object \n 3   1981                887 non-null    object \n 4   1982                899 non-null    object \n 5   1983                909 non-null    float64\n 6   1984                915 non-null    float64\n 7   1985                929 non-null    float64\n 8   1986                937 non-null    object \n 9   1987                942 non-null    float64\n 10  1988                955 non-null    float64\n 11  1989                965 non-null    float64\n 12  1990                1021 non-null   object \n 13  1991                1064 non-null   object \n 14  1992                1113 non-null   float64\n 15  1993                1183 non-null   float64\n 16  1994                1202 non-null   float64\n 17  1995                1245 non-null   float64\n 18  1996                1272 non-null   float64\n 19  1997                1293 non-null   float64\n 20  1998                1317 non-null   float64\n 21  1999                1333 non-null   float64\n 22  2000                1372 non-null   float64\n 23  2001                1403 non-null   float64\n 24  2002                1414 non-null   float64\n 25  2003                1422 non-null   float64\n 26  2004                1431 non-null   float64\n 27  2005                1438 non-null   float64\n 28  2006                1438 non-null   float64\n 29  2007                1440 non-null   float64\n 30  2008                1442 non-null   float64\n 31  2009                1444 non-null   float64\n 32  2010                1445 non-null   float64\n 33  2011                1442 non-null   float64\n 34  2012                1448 non-null   float64\n 35  2013                1450 non-null   float64\n 36  2014                1456 non-null   float64\n 37  2015                1455 non-null   float64\n 38  2016                1455 non-null   float64\n 39  2017                1458 non-null   float64\n 40  2018                1456 non-null   float64\n 41  2019                1451 non-null   float64\n 42  2020                1439 non-null   object \n 43  2021                1432 non-null   float64\ndtypes: float64(35), object(9)\nmemory usage: 533.6+ KB"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#background",
    "href": "EDA_IMF_Airbnb.html#background",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "3.7 Background",
    "text": "3.7 Background\nThis dataset is about yearly World Economic Outlook (WEO) from 2018 to 2021.\nit contains data from the World Economic Outlook that pertains to national accounts,\n\ninflation,\nunemployment rates,\nbalance of payments,\nfiscal indicators,\ntrade for countries and country groups (aggregates), and\ncommodity prices"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#remove-last-2-rows-removed",
    "href": "EDA_IMF_Airbnb.html#remove-last-2-rows-removed",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "4.1 Remove last 2 rows # Removed",
    "text": "4.1 Remove last 2 rows # Removed\n\n\nCode\n# display(df_imf[df_imf[\"Country\"].isna()])\n# df_imf[df_imf[\"Country\"].isna()].isna().sum(axis=1)\n\n\n\n\nCode\n# df_imf = df_imf.iloc[:-2]\n# df_imf.shape\n\n\nQ2) Using an appropriate graph, visualize the unemployment rates from 2010 - 2019 for the 5 countries with the highest mean unemployment rates over these 10 years.\n\nAssume all NaN values are 0s (i.e. change all NaN values to 0).\nA properly labeled figure of size (13 by 10) must be displayed as the end result at the last code cell of this question.\nSave the figure with a dpi of 200 and name it imf_plot01.png (This file is to be submitted).\n\n\n\nCode\ndf[\"Subject Descriptor\"].unique()\n\n\narray(['Gross domestic product, constant prices',\n       'Gross domestic product, current prices',\n       'Gross domestic product per capita, constant prices',\n       'Inflation, average consumer prices',\n       'Inflation, end of period consumer prices', 'Unemployment rate',\n       'General government net lending/borrowing',\n       'Current account balance'], dtype=object)\n\n\n\n\nCode\n# scope down dataframe to reduce memory\ntargeted_years = list(str(y) for y in range(2010, 2020))\ndf1 = df[[\"Country\", \"Subject Descriptor\"] + targeted_years]\ndisplay(df1.head())\ndf1.info()\n\n\n\n\n\n\n\n\n\n\nCountry\nSubject Descriptor\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n\n\n\n\n0\nAfghanistan\nGross domestic product, constant prices\n8.438\n6.479\n13.968\n5.683\n2.697\n0.988\n2.164\n2.889\n2.664\n3.037\n\n\n1\nAfghanistan\nGross domestic product, current prices\n44.323\n48.180\n55.963\n60.181\n62.948\n64.231\n66.301\n69.501\n73.091\n76.624\n\n\n2\nAfghanistan\nGross domestic product per capita, constant pr...\n5.431\n3.234\n10.299\n2.236\n-0.521\n-1.941\n-0.547\n0.358\n1.268\n1.654\n\n\n3\nAfghanistan\nInflation, average consumer prices\n2.179\n11.804\n6.441\n7.386\n4.674\n-0.662\n4.384\n4.976\n0.626\n2.302\n\n\n4\nAfghanistan\nInflation, end of period consumer prices\n10.246\n9.312\n5.875\n7.241\n1.487\n1.131\n4.588\n3.041\n0.755\n2.773\n\n\n\n\n\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1552 entries, 0 to 1551\nData columns (total 12 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   Country             1552 non-null   object \n 1   Subject Descriptor  1552 non-null   object \n 2   2010                1445 non-null   float64\n 3   2011                1442 non-null   float64\n 4   2012                1448 non-null   float64\n 5   2013                1450 non-null   float64\n 6   2014                1456 non-null   float64\n 7   2015                1455 non-null   float64\n 8   2016                1455 non-null   float64\n 9   2017                1458 non-null   float64\n 10  2018                1456 non-null   float64\n 11  2019                1451 non-null   float64\ndtypes: float64(10), object(2)\nmemory usage: 145.6+ KB\n\n\n\n\nCode\ndf1 = df1[df1[\"Subject Descriptor\"] == \"Unemployment rate\"]\ndisplay(df1.head(2))\ndf1.info()\n\n\n\n\n\n\n\n\n\n\nCountry\nSubject Descriptor\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n\n\n\n\n5\nAfghanistan\nUnemployment rate\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n13\nAlbania\nUnemployment rate\n14.0\n14.0\n13.4\n15.9\n17.5\n17.1\n15.2\n13.7\n12.3\n12.0\n\n\n\n\n\n\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 194 entries, 5 to 1549\nData columns (total 12 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   Country             194 non-null    object \n 1   Subject Descriptor  194 non-null    object \n 2   2010                112 non-null    float64\n 3   2011                112 non-null    float64\n 4   2012                112 non-null    float64\n 5   2013                112 non-null    float64\n 6   2014                112 non-null    float64\n 7   2015                112 non-null    float64\n 8   2016                112 non-null    float64\n 9   2017                112 non-null    float64\n 10  2018                110 non-null    float64\n 11  2019                105 non-null    float64\ndtypes: float64(10), object(2)\nmemory usage: 19.7+ KB"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#check-is-there-any-year-with-unemployment-rate-of-zero-before-replacing-nan-with-zero",
    "href": "EDA_IMF_Airbnb.html#check-is-there-any-year-with-unemployment-rate-of-zero-before-replacing-nan-with-zero",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "4.2 Check is there any year with unemployment rate of zero before replacing NaN with zero",
    "text": "4.2 Check is there any year with unemployment rate of zero before replacing NaN with zero\n\n\nCode\nassert not df1[targeted_years].apply(lambda x: x == 0).any(axis=0).sum()"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#calculate-mean-using-api-to-get-top-5-countries-rank-by-mean-of-unemployment-rate",
    "href": "EDA_IMF_Airbnb.html#calculate-mean-using-api-to-get-top-5-countries-rank-by-mean-of-unemployment-rate",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "5.1 Calculate mean using API to get top 5 countries rank by mean of unemployment rate",
    "text": "5.1 Calculate mean using API to get top 5 countries rank by mean of unemployment rate\n\n\nCode\ndf1[\"Mean\"] = df1[targeted_years].mean(axis=1)\ndf1_sorted_by_mean = df1.sort_values(by=\"Mean\", ascending=False)\ndf1_sorted_by_mean\n\n\n\n\n\n\n\n\n\n\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\n2018\n2019\nMean\n\n\nCountry\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKosovo\nNaN\nNaN\n30.900\n30.000\n35.300\n32.900\n27.500\n30.500\n29.600\n25.700\n30.3000\n\n\nNorth Macedonia\n32.050\n31.375\n31.000\n29.000\n28.025\n26.050\n23.750\n22.375\n20.725\n17.250\n26.1600\n\n\nSouth Africa\n24.875\n24.800\n24.875\n24.725\n25.100\n25.350\n26.725\n27.450\n27.125\n28.700\n25.9725\n\n\nBosnia and Herzegovina\n27.202\n27.600\n28.000\n27.500\n27.500\n27.700\n25.400\n20.500\n18.400\n15.700\n24.5502\n\n\nGreece\n12.725\n17.850\n24.425\n27.475\n26.500\n24.900\n23.550\n21.450\n19.300\n17.300\n21.5475\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nSingapore\n2.175\n2.025\n1.950\n1.900\n1.950\n1.900\n2.075\n2.175\n2.100\n2.250\n2.0500\n\n\nMacao SAR\n2.825\n2.575\n2.000\n1.850\n1.700\n1.825\n1.900\n1.975\n1.800\n1.725\n2.0175\n\n\nKuwait\n2.072\n2.078\n1.986\n1.902\n1.722\n1.322\n1.248\n1.280\n1.087\nNaN\n1.6330\n\n\nThailand\n1.050\n0.658\n0.675\n0.700\n0.800\n0.900\n1.000\n1.200\n1.100\n1.100\n0.9183\n\n\nBelarus\n0.827\n0.668\n0.614\n0.508\n0.488\n0.912\n1.017\n0.768\n0.428\n0.308\n0.6538\n\n\n\n\n114 rows × 11 columns"
  },
  {
    "objectID": "EDA_IMF_Airbnb.html#only-keep-rows-that-the-customer-are-interested",
    "href": "EDA_IMF_Airbnb.html#only-keep-rows-that-the-customer-are-interested",
    "title": "Exploratory Data Analysis with Python Libraries",
    "section": "7.1 Only keep rows that the customer are interested",
    "text": "7.1 Only keep rows that the customer are interested\n\n\n\n\n\n\n\ndesired units\ndataframe filtering\n\n\n\n\nto rent an entire apartment,\ndf.room_type == “Entire home/ap”\n\n\nwest of Brooklyn (Red Hook, Sunset Park, Cobble Hill, Carroll Gardens and Bay Ridge)\ndf.neighbourhood.apply(lambda x: x in [“Red Hook, Sunset Park, Cobble Hill, Carroll Gardens, Bay Ridge”]\n\n\nfor a maximum of 2 weeks (14 nights).\ndf.minimum_nights.apply(lambda x: x&gt;=14\n\n\n\n\n\nCode\ndf = df[targeted_col]\n\n\n\n\nCode\ntarget_room_type = \"Entire home/apt\"\nif \"room_type\" in df.columns:\n    df = df[df.room_type == target_room_type].drop(columns=[\"room_type\"])\ndf.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 25409 entries, 1 to 48892\nData columns (total 5 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   neighbourhood   25409 non-null  object \n 1   longitude       25409 non-null  float64\n 2   price           25409 non-null  int64  \n 3   minimum_nights  25409 non-null  int64  \n 4   latitude        25409 non-null  float64\ndtypes: float64(2), int64(2), object(1)\nmemory usage: 1.2+ MB\n\n\n\n\nCode\ntarget_neighbourhoods = [\n    x.strip()\n    for x in \"Red Hook, Sunset Park, Cobble Hill, Carroll Gardens, Bay Ridge\".split(\",\")\n]\nprint(\"Targeted neighbourhood: \", target_neighbourhoods)\n\ndf = df[df.neighbourhood.apply(lambda x: x in target_neighbourhoods)]\n# df.info()\n# ans = list(map(lambda x: x in tuple(df.neighbourhood.unique()), target_neighbourhoods))\n# assert sum(ans) == len(target_neighbourhoods)\n\n\nTargeted neighbourhood:  ['Red Hook', 'Sunset Park', 'Cobble Hill', 'Carroll Gardens', 'Bay Ridge']\n\n\n\n\nCode\ndf = df[df.minimum_nights.apply(lambda x: x &lt;= 14)]\n\n\n\n\nCode\nfig, ax = plt.subplots(1, 1, figsize=(5, 5))\nplot = sns.scatterplot(df, x=\"latitude\", y=\"longitude\", hue=\"neighbourhood\", ax=ax)\nax.set_title(\"Location of AirBnB host that are candidates for the customer stay\")\nplt.legend(fontsize=\"large\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nCode\n# use integer type to save data frame memory\nimport numpy as np\n\ndf.minimum_nights = df.minimum_nights.astype(np.int8)\ndf.price = df.price.astype(np.int16)\n# df.info()\n\n\n\n\nCode\n# Get total cost of the stay for 1 to 14 nights\nm = map(lambda n: df.minimum_nights.apply(lambda x: n if n &gt;= x else 0), range(1, 15))\ndf[list(range(1, 15))] = pd.DataFrame(dict(zip(range(1, 15), m)))\ndf[list(range(1, 15))] = df[list(range(1, 15))].apply(lambda c: (c * df.price))\ndtypes = {n: np.int16 for n in range(1, 15)}\ndf[list(range(1, 15))] = df[list(range(1, 15))].astype(dtypes)\ndisplay(df)\n# df.info()\n\n\n\n\n\n\n\n\n\n\nneighbourhood\nlongitude\nprice\nminimum_nights\nlatitude\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n\n101\nCarroll Gardens\n-74.00154\n175\n2\n40.67967\n0\n350\n525\n700\n875\n1050\n1225\n1400\n1575\n1750\n1925\n2100\n2275\n2450\n\n\n142\nCobble Hill\n-73.99183\n140\n2\n40.68570\n0\n280\n420\n560\n700\n840\n980\n1120\n1260\n1400\n1540\n1680\n1820\n1960\n\n\n168\nCarroll Gardens\n-74.00135\n165\n2\n40.67830\n0\n330\n495\n660\n825\n990\n1155\n1320\n1485\n1650\n1815\n1980\n2145\n2310\n\n\n219\nCobble Hill\n-73.99386\n159\n2\n40.68926\n0\n318\n477\n636\n795\n954\n1113\n1272\n1431\n1590\n1749\n1908\n2067\n2226\n\n\n282\nCarroll Gardens\n-73.99443\n190\n3\n40.67846\n0\n0\n570\n760\n950\n1140\n1330\n1520\n1710\n1900\n2090\n2280\n2470\n2660\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n48274\nSunset Park\n-73.99146\n250\n3\n40.66294\n0\n0\n750\n1000\n1250\n1500\n1750\n2000\n2250\n2500\n2750\n3000\n3250\n3500\n\n\n48323\nBay Ridge\n-74.03145\n125\n5\n40.63270\n0\n0\n0\n0\n625\n750\n875\n1000\n1125\n1250\n1375\n1500\n1625\n1750\n\n\n48351\nBay Ridge\n-74.02676\n200\n1\n40.62373\n200\n400\n600\n800\n1000\n1200\n1400\n1600\n1800\n2000\n2200\n2400\n2600\n2800\n\n\n48657\nSunset Park\n-74.00656\n120\n3\n40.64372\n0\n0\n360\n480\n600\n720\n840\n960\n1080\n1200\n1320\n1440\n1560\n1680\n\n\n48816\nSunset Park\n-73.98908\n100\n4\n40.66266\n0\n0\n0\n400\n500\n600\n700\n800\n900\n1000\n1100\n1200\n1300\n1400\n\n\n\n\n508 rows × 19 columns"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "VincentChong123.github.io",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "index.html#visualization",
    "href": "index.html#visualization",
    "title": "VincentChong123.github.io",
    "section": "Visualization",
    "text": "Visualization\nAirbnb"
  }
]